// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/99designs/gqlgen/graphql"
)

type Budget struct {
	TaxRate  float64    `json:"taxRate"`
	Expenses []*Expense `json:"expenses"`
	Years    int        `json:"years"`
	Goals    []*Goal    `json:"goals"`
}

type BudgetInput struct {
	TaxRate  float64         `json:"taxRate"`
	Expenses []*ExpenseInput `json:"expenses"`
	Years    int             `json:"years"`
	Goals    []*GoalInput    `json:"goals"`
}

type Event struct {
	Start       string  `json:"start"`
	End         string  `json:"end"`
	Description *string `json:"description,omitempty"`
	Location    *string `json:"location,omitempty"`
	Summary     *string `json:"summary,omitempty"`
}

type Expense struct {
	Name    string         `json:"name"`
	Amount  float64        `json:"amount"`
	Cadence ExpenseCadence `json:"cadence"`
}

type ExpenseInput struct {
	Name    string         `json:"name"`
	Amount  float64        `json:"amount"`
	Cadence ExpenseCadence `json:"cadence"`
}

type Goal struct {
	Name   string   `json:"name"`
	Amount float64  `json:"amount"`
	Type   GoalType `json:"type"`
}

type GoalCalculationOutput struct {
	AnnualPreTaxIncome  float64 `json:"annualPreTaxIncome"`
	MonthlyPreTaxIncome float64 `json:"monthlyPreTaxIncome"`
}

type GoalInput struct {
	Name   string  `json:"name"`
	Amount float64 `json:"amount"`
}

type Mutation struct {
}

type NewTodo struct {
	Text   string `json:"text"`
	UserID string `json:"userId"`
}

type ProcessICSInput struct {
	Input graphql.Upload `json:"input"`
}

type Query struct {
}

type Todo struct {
	ID   string `json:"id"`
	Text string `json:"text"`
	Done bool   `json:"done"`
	User *User  `json:"user"`
}

type User struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type ExpenseCadence string

const (
	ExpenseCadenceWeekly    ExpenseCadence = "WEEKLY"
	ExpenseCadenceBiWeekly  ExpenseCadence = "BI_WEEKLY"
	ExpenseCadenceMonthly   ExpenseCadence = "MONTHLY"
	ExpenseCadenceBiMonthly ExpenseCadence = "BI_MONTHLY"
	ExpenseCadenceQuarterly ExpenseCadence = "QUARTERLY"
	ExpenseCadenceYearly    ExpenseCadence = "YEARLY"
)

var AllExpenseCadence = []ExpenseCadence{
	ExpenseCadenceWeekly,
	ExpenseCadenceBiWeekly,
	ExpenseCadenceMonthly,
	ExpenseCadenceBiMonthly,
	ExpenseCadenceQuarterly,
	ExpenseCadenceYearly,
}

func (e ExpenseCadence) IsValid() bool {
	switch e {
	case ExpenseCadenceWeekly, ExpenseCadenceBiWeekly, ExpenseCadenceMonthly, ExpenseCadenceBiMonthly, ExpenseCadenceQuarterly, ExpenseCadenceYearly:
		return true
	}
	return false
}

func (e ExpenseCadence) String() string {
	return string(e)
}

func (e *ExpenseCadence) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ExpenseCadence(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ExpenseCadence", str)
	}
	return nil
}

func (e ExpenseCadence) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GoalType string

const (
	GoalTypeAsset   GoalType = "ASSET"
	GoalTypeSavings GoalType = "SAVINGS"
)

var AllGoalType = []GoalType{
	GoalTypeAsset,
	GoalTypeSavings,
}

func (e GoalType) IsValid() bool {
	switch e {
	case GoalTypeAsset, GoalTypeSavings:
		return true
	}
	return false
}

func (e GoalType) String() string {
	return string(e)
}

func (e *GoalType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GoalType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GoalType", str)
	}
	return nil
}

func (e GoalType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
